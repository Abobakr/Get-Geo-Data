#pragma checksum "C:\Users\ABUBA\Downloads\adsmap\Views\Map\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "949e5a512bd82c7b59a1bf9c88e1a17f577ed27d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Map_Index), @"mvc.1.0.view", @"/Views/Map/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Map/Index.cshtml", typeof(AspNetCore.Views_Map_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\ABUBA\Downloads\adsmap\Views\_ViewImports.cshtml"
using adsmap;

#line default
#line hidden
#line 2 "C:\Users\ABUBA\Downloads\adsmap\Views\_ViewImports.cshtml"
using adsmap.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"949e5a512bd82c7b59a1bf9c88e1a17f577ed27d", @"/Views/Map/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5ef07da754364caa63ecf885a3db12716f0787e7", @"/Views/_ViewImports.cshtml")]
    public class Views_Map_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<adsmap.Models.User>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/adsmap.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "C:\Users\ABUBA\Downloads\adsmap\Views\Map\Index.cshtml"
  
    ViewData["Title"] = "IOT Map";

#line default
#line hidden
            DefineSection("AdditionalLib", async() => {
                BeginContext(95, 189, true);
                WriteLiteral("\r\n    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\" />\r\n    <link href=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css\" rel=\"stylesheet\">\r\n    ");
                EndContext();
                BeginContext(284, 49, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "949e5a512bd82c7b59a1bf9c88e1a17f577ed27d4241", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(333, 8, true);
                WriteLiteral("\r\n    \r\n");
                EndContext();
            }
            );
            BeginContext(344, 2894, true);
            WriteLiteral(@"
<script src=""https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.0.3.min.js""></script>

<script src=""//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js""></script>
<script async defer
        src=""https://maps.googleapis.com/maps/api/js?key=AIzaSyDQGVBSjVH52CDMQFYsvC4h9tdIWrAjhYg&callback=initializeFunc&libraries=places""
        type=""text/javascript"">
</script>

<script type=""text/javascript"">

    if (!String.prototype.format) {
        String.prototype.format = function () {
            var args = arguments;
            return this.replace(/{(\d+)}/g, function (match, number) {
                return typeof args[number] != 'undefined'
                  ? args[number]
                  : match
                ;
            });
        };
    }

    // For today's date;
    Date.prototype.today = function () {
        return this.getFullYear() +""-""+(((this.getMonth()+1) < 10)?""0"":"""") + (this.getMonth()+1) +""-""+  ((this.getDate() < 10)?""0"":"""") + this.getDate();
    }

 ");
            WriteLiteral(@"   // For the time now
    Date.prototype.timeNow = function () {
        return ((this.getHours() < 10)?""0"":"""") + this.getHours() +"":""+ ((this.getMinutes() < 10)?""0"":"""") + this.getMinutes() ;
    }

    Date.prototype.timeNowWithSeconds = function () {
        return ((this.getHours() < 10)?""0"":"""") + this.getHours() +"":""+ ((this.getMinutes() < 10)?""0"":"""") + this.getMinutes() +"":""+ ((this.getSeconds() < 10)?""0"":"""") + this.getSeconds();
    }




    function detectBrowser() {
        var useragent = navigator.userAgent;
        var mapdiv = document.getElementById(""map-canvas"");

        if (useragent.indexOf('iPhone') != -1 || useragent.indexOf('Android') != -1) {
            mapdiv.style.width = '100%';
            mapdiv.style.height = '95%';

            var heading = document.getElementById(""heading"");
            heading.parentNode.removeChild(heading);
            var line = document.getElementById(""hr-element"");
            line.parentNode.removeChild(line);
            var foo");
            WriteLiteral(@"ter = document.getElementsByTagName(""footer"")[0];
            footer.parentNode.removeChild(footer);
        }

    }

    function CloudSCADAMaps() {

        detectBrowser();
        toastr.options = {
            ""closeButton"": true,
            ""debug"": false,
            ""newestOnTop"": true,
            ""progressBar"": false,
            ""positionClass"": ""toast-top-center"",
            ""preventDuplicates"": true,
            ""onclick"": null,
            ""showDuration"": ""300"",
            ""hideDuration"": ""1000"",
            ""timeOut"": ""5000"",
            ""extendedTimeOut"": ""1000"",
            ""showEasing"": ""swing"",
            ""hideEasing"": ""linear"",
            ""showMethod"": ""fadeIn"",
            ""hideMethod"": ""fadeOut""
        }
        var mainURL = ""https://localhost:44366/api/"";
        var userId = '");
            EndContext();
            BeginContext(3239, 12, false);
#line 91 "C:\Users\ABUBA\Downloads\adsmap\Views\Map\Index.cshtml"
                 Write(Model.UserId);

#line default
#line hidden
            EndContext();
            BeginContext(3251, 2701, true);
            WriteLiteral(@"';
        var lat1 = 37.8738982;
        var lng1 = 32.4951261;
        var minSouthWestLat = 90;
        var minSouthWestLng = 180;
        var maxNorthEastLat = -90;
        var maxNorthEastLng = -180;
        var zoomMinLimit = 14;
        var zoomDefualtLevel = zoomMinLimit;
        var zoomLastLevel = zoomDefualtLevel;
        var requestedBounds = [];
        var requestedRectangles = [];
        var otherRectangles = [];
        var markersAreHidden = false;
        var markerScaleSize = 0.5;
        var markerScaleRatio = 1.25;
        var fullnessColors = ['green', 'yellow', 'orange', 'red'];
        var height = 60; //
        var width = 40;
        var offset = height / 6;
        var maxHeight = height - offset;
        var requestIsRepeated = false;
        var xhrUnitItems = null;
        var minSW = new google.maps.LatLng(37.5, 32, true);
        var maxNE = new google.maps.LatLng(38.5, 33, true);
        var dataBounds = [new google.maps.LatLngBounds(minSW, maxNE)];");
            WriteLiteral(@"
        var unitSubListsValues = [];
        var unitSubListsIdes = [];
        var unitSubListMarkers = [];
        var unitItemIdes = [];
        var markers = [];
        var smallMarkers = [];
        var smallMarkersUnitIdes = [];
        var tempSubMarkers = [];
        var infoWindows = [];
        var dateTimeInputValue = new Date(2000, 01, 01);

        var styles = [
            {
                ""featureType"": ""road.arterial"",
                ""elementType"": ""geometry.fill"",
                ""stylers"": [
                    { ""visibility"": ""on"" },
                    { ""hue"": ""#0022ff"" },
                    { ""color"": ""#8080d6"" },
                    { ""lightness"": 36 },
                    { ""saturation"": 65 },
                    { ""gamma"": 1.13 }
                ]
            }, {
                ""featureType"": ""road.highway"",
                ""stylers"": [
                    { ""hue"": ""#003bff"" }
                ]
            }, {
                ""featureType"": ""lands");
            WriteLiteral(@"cape.man_made"",
                ""elementType"": ""geometry.fill"",
                ""stylers"": [
                    { ""visibility"": ""on"" },
                    { ""hue"": ""#08ff00"" }
                ]
            }, {
                ""featureType"": ""landscape.natural.terrain"",
                ""elementType"": ""geometry.fill"",
                ""stylers"": [
                    { ""visibility"": ""on"" },
                    { ""hue"": ""#ff0000"" }
                ]
            }
        ]
        var styledMapType = new google.maps.StyledMapType(styles,
            { name: 'ilanat' });

        var userCenter = null;
        var userCenter =  ");
            EndContext();
            BeginContext(5953, 28, false);
#line 165 "C:\Users\ABUBA\Downloads\adsmap\Views\Map\Index.cshtml"
                     Write(Json.Serialize(Model.Center));

#line default
#line hidden
            EndContext();
            BeginContext(5981, 47199, true);
            WriteLiteral(@";

        if (userCenter != null) {
            lat1 = userCenter.lat;
            lng1 = userCenter.lng;
        }
        else {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(savePosition);
            }
            else {
                toastr.error(""Geolocation is not supported by this browser. Defualt location is Konya !!!"");
            }
        }

        var mapOptions = {
            center: { lat: lat1, lng: lng1 },
            zoom: zoomDefualtLevel,
            disableDefaultUI: true,
            scaleControl: true,
            mapTypeControl: true,
            mapTypeControlOptions: {
                mapTypeIds: ['roadmap', 'satellite', 'hybrid', 'terrain', 'ilanat_styled_map'],
                position: google.maps.ControlPosition.TOP_RIGHT,
                style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
            },
            //zoomControl: true,
            //zoomControlOptions: {
            //    st");
            WriteLiteral(@"yle: google.maps.ZoomControlStyle.DEFAULT,
            //    position: google.maps.ControlPosition.RIGHT_BOTTOM
            //}
        };

        var map = new google.maps.Map(document.getElementById('map-canvas'),mapOptions);
         map.mapTypes.set('ilanat_styled_map', styledMapType);
         map.setMapTypeId('ilanat_styled_map');

        var acOptions = {
        };
        var autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), acOptions);
        autocomplete.bindTo('bounds', map);
        google.maps.event.addListener(autocomplete, 'place_changed', function () {
            var place = autocomplete.getPlace();
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
            }
            map.setZoom(zoomMinLimit);
        });


        var widgetDiv = document.getElementById('save-widget');
        map.controls[g");
            WriteLiteral(@"oogle.maps.ControlPosition.TOP_LEFT].push(widgetDiv);


        function savePosition(position) {
            lat1 = position.coords.latitude;
            lng1 = position.coords.longitude;
            map.setCenter({ lat: lat1, lng: lng1 });
        }

        function getUserMapCenter(id) {
            $.ajax({
                type: ""GET"",
                url: mainURL + ""User/"" + id,
                error: function (jqXHR, textStatus, errorThrown) {
                    toastr.error(""Something went wrong! : "" + errorThrown);
                },
                success: function (result) {
                    //userCenter = JSON.stringify(result);
                    //toastr.success(""result = "" + userCenter);
                    return result;
                }
            });
        }

        function Max(a, b) {
            if (a > b)
                return a;
            return b;
        }

        function Min(a, b) {
            if (a < b)
                return a;
    ");
            WriteLiteral(@"        return b;
        }

        function boundContainsBound(bound1, bound2) {

            if (bound1.contains(bound2.getSouthWest()) && bound1.contains(bound2.getNorthEast())) {
                return true;
            }
            return false;
        }

        function getOverlappingBound(bound1, bound2) {//add another param

            var bound1NE = bound1.getNorthEast();
            var bound1SW = bound1.getSouthWest();

            var bound2NE = bound2.getNorthEast();
            var bound2SW = bound2.getSouthWest();


            if (boundContainsBound(bound1, bound2)) {
                return bound2;
            }

            if (boundContainsBound(bound2, bound1)) {
                return bound1;
            }


            // LatLngBounds.intersects(other:LatLngBounds) return true for bounds intersection
            if (bound1NE.lat() <= bound2SW.lat() || bound1NE.lng() <= bound2SW.lng()
                || bound1SW.lat() >= bound2NE.lat() || bound1SW.lng() ");
            WriteLiteral(@">= bound2NE.lng()) {

                return null;
            }


            //else getOverlappingBound

            // Defining RequestBoundSW LatLng
            var reqSW = new google.maps.LatLng(Max(bound1SW.lat(), bound2SW.lat()), Max(bound1SW.lng(), bound2SW.lng()));

            // Defining RequestBoundNE LatLng
            var reqNE = new google.maps.LatLng(Min(bound1NE.lat(), bound2NE.lat()), Min(bound1NE.lng(), bound2NE.lng()));

            // Defining RequestBoundBound
            var requestBound = new google.maps.LatLngBounds(reqSW, reqNE);

            return requestBound;

        }

        function computeBoundArea(bound) {

            var boundSW = bound.getSouthWest();
            var boundNE = bound.getNorthEast();

            var width = Math.abs(boundNE.lng()) - Math.abs(boundSW.lng());
            var height = Math.abs(boundNE.lat()) - Math.abs(boundSW.lat());

            var boundArea = width * height;
            return boundArea;
        }

     ");
            WriteLiteral(@"   function getOverlappingPercentage(bound1, bound2) {
            var bound1Area = computeBoundArea(bound1);
            var bound2Area = computeBoundArea(bound2);

            return (bound2Area / bound1Area * 100);
        }

        function handleRequestBound(requestBound, isCornerBound) {

            var overlappingBound = null;
            var maxOverlappingBound = null;

            var overlappingPercentage = 0;
            var sumOverlappingPercentage = 0;
            var maxOverlappingPercentage = 0;

            for (x in requestedBounds) {

                overlappingBound = getOverlappingBound(requestBound, requestedBounds[x]);

                if (!overlappingBound) {
                    continue;
                }

                if (overlappingBound == requestBound) { // The requestBound inside the requestedBounds[x]
                    return;
                }
                //else
                overlappingPercentage = getOverlappingPercentage(requestBound, ");
            WriteLiteral(@"overlappingBound);
                sumOverlappingPercentage += overlappingPercentage;

                if (overlappingPercentage > maxOverlappingPercentage) {
                    maxOverlappingPercentage = overlappingPercentage;
                    maxOverlappingBound = overlappingBound;
                }
            }

            sumOverlappingPercentage = Math.round(sumOverlappingPercentage);

            if (sumOverlappingPercentage >= 100) { // The requestBound inside the previous requestedBounds
                return;
            }

            if (maxOverlappingBound != null) { // There was Overlapping
                var bounds = split123Bound(requestBound, maxOverlappingBound);
                for (var j = 0, len = bounds.length; j < len; j++) {
                    handleRequestBound(bounds[j], isCornerBound);
                }
            }
            else {                          // far away request bound
                sendUnitItemsRequest(requestBound);
               ");
            WriteLiteral(@" if (isCornerBound) {
                    addRectangle(requestBound, 'yellow', 0.1);
                }
            }
        }

        function mergeBound(requestBound) {

            var overlappingBound = null;
            var overlappingPercentage = 0;
            var maxOverlappingBound = null;
            var maxOverlappingPercentage = 0;
            var maxOverlappingIndex = -1;

            for (var x = 0; x < requestedBounds.length; x++) {

                overlappingBound = getOverlappingBound(requestBound, requestedBounds[x]);

                if (!overlappingBound) {
                    continue;
                }

                if (overlappingBound == requestedBounds[x]) { // The requestedBounds[x]  inside the requestBound
                    requestedBounds.splice(x, 1);
                    requestedRectangles[x].setMap(null);
                    requestedRectangles.splice(x, 1);
                    x--;
                    continue;
                }
             ");
            WriteLiteral(@"   //else there is partial overlapping

                overlappingPercentage = getOverlappingPercentage(requestBound, overlappingBound);

                if (overlappingPercentage > maxOverlappingPercentage) {
                    maxOverlappingPercentage = overlappingPercentage;
                    maxOverlappingBound = overlappingBound;
                    maxOverlappingIndex = x; // max Overlapping requestedBound Index
                }
            }

            if (maxOverlappingIndex != -1) { // There was Overlapping
                var cornerBounds = getCornerBounds(requestBound, requestedBounds[maxOverlappingIndex]);
                if (cornerBounds != null) {
                    if (cornerBounds[0] != null) {
                        handleRequestBound(cornerBounds[0], true);
                    }
                    if (cornerBounds[1] != null) {
                        handleRequestBound(cornerBounds[1], true);
                    }
                }

                var bigger");
            WriteLiteral(@"Bound = requestedBounds[maxOverlappingIndex];
                var newRequestBound = requestBound.union(biggerBound);

                requestedBounds.splice(maxOverlappingIndex, 1);
                clearOtherContainedRectangles(biggerBound);
                requestedRectangles[maxOverlappingIndex].setMap(null);
                requestedRectangles.splice(maxOverlappingIndex, 1);

                mergeBound(newRequestBound);

                addRectangle(biggerBound, 'green', 0.05);



            }
            else {
                requestedBounds.push(requestBound);
                addRectangle(requestBound, 'red', 0.05);
            }

        }

        function addRectangle(bound, color, opacity) {

            var rectangle = new google.maps.Rectangle();
            var rectOptions = {
                strokeColor: 'black',
                strokeOpacity: 0.5,
                strokeWeight: 1,
                fillColor: color,
                fillOpacity: opacity,
            ");
            WriteLiteral(@"    map: map,
                bounds: bound
            };
            rectangle.setOptions(rectOptions);
            if (color == 'red') {
                requestedRectangles.push(rectangle);
            }
            else {
                otherRectangles.push(rectangle);
            }
        }

        function clearOtherContainedRectangles(biggerBound) {
            for (var x = 0; x < otherRectangles.length; x++) {
                if (boundContainsBound(biggerBound, otherRectangles[x].bounds)) {
                    otherRectangles[x].setMap(null);
                    otherRectangles.splice(x, 1);
                    x--;
                }
            }
        }

        function split123Bound(bound, splittingBound) { // 123-LeftToRight algorithm - author: Abubaker Almustafa

            var splittedBounds = [];

            var SW1 = null;
            var NE1 = null;
            var SW2 = null;
            var NE2 = null;
            var SW3 = null;
            var NE3 = ");
            WriteLiteral(@"null;

            var lat = null;
            var lng = null;


            // check for 1
            if (bound.getSouthWest().lat() < splittingBound.getSouthWest().lat()) {

                SW1 = bound.getSouthWest();

                lat = splittingBound.getSouthWest().lat();
                lng = bound.getNorthEast().lng();
                NE1 = new google.maps.LatLng(lat, lng);
            }

            // check for 2
            // splitting bound between the sides of the bound
            if (bound.getSouthWest().lng() < splittingBound.getSouthWest().lng() && bound.getNorthEast().lng() > splittingBound.getNorthEast().lng()) {



                lat = splittingBound.getSouthWest().lat();
                lng = bound.getSouthWest().lng();
                var SW = new google.maps.LatLng(lat, lng, true);

                lat = splittingBound.getNorthEast().lat();
                lng = splittingBound.getSouthWest().lng();
                var NE = new google.maps.LatLng(lat, lng,");
            WriteLiteral(@" true);

                var leftBound = new google.maps.LatLngBounds(SW, NE);
                splittedBounds.push(leftBound);


                lat = splittingBound.getSouthWest().lat();
                lng = splittingBound.getNorthEast().lng();
                SW = new google.maps.LatLng(lat, lng, true);

                lat = splittingBound.getNorthEast().lat();
                lng = bound.getNorthEast().lng();
                NE = new google.maps.LatLng(lat, lng, true);

                var rightBound = new google.maps.LatLngBounds(SW, NE);
                splittedBounds.push(rightBound);

            }
            else {
                // on the side splitting bound
                if (bound.getSouthWest().lng() == splittingBound.getSouthWest().lng() || bound.getNorthEast().lng() == splittingBound.getNorthEast().lng()) {

                    // on the both sides splitting bound
                    if (bound.getSouthWest().lng() == splittingBound.getSouthWest().lng() && bound.getNo");
            WriteLiteral(@"rthEast().lng() == splittingBound.getNorthEast().lng()) {
                        // skip todo CHANGE TO BETTER CONDITION
                    }
                    else {
                        lat = splittingBound.getSouthWest().lat();
                        if (bound.getSouthWest().lng() == splittingBound.getSouthWest().lng()) {
                            lng = splittingBound.getNorthEast().lng();
                        }
                        else {
                            lng = bound.getSouthWest().lng();
                        }
                        SW2 = new google.maps.LatLng(lat, lng);

                        lat = splittingBound.getNorthEast().lat();
                        if (bound.getNorthEast().lng() == splittingBound.getNorthEast().lng()) {
                            lng = splittingBound.getSouthWest().lng();
                        }
                        else {
                            lng = bound.getNorthEast().lng();
                        }
        ");
            WriteLiteral(@"                NE2 = new google.maps.LatLng(lat, lng);
                    }
                }
            }

            // check for 3
            if (bound.getNorthEast().lat() > splittingBound.getNorthEast().lat()) {

                lat = splittingBound.getNorthEast().lat();
                lng = bound.getSouthWest().lng();
                SW3 = new google.maps.LatLng(lat, lng);

                NE3 = bound.getNorthEast();
            }


            if (SW1 != null && NE1 != null) {
                splittedBounds.push(new google.maps.LatLngBounds(SW1, NE1));
            }
            if (SW2 != null && NE2 != null) {
                splittedBounds.push(new google.maps.LatLngBounds(SW2, NE2));
            }
            if (SW3 != null && NE3 != null) {
                splittedBounds.push(new google.maps.LatLngBounds(SW3, NE3));
            }

            return (splittedBounds);

        }

        function getCornerBounds(bound1, bound2) { // similar  to 123 split bound al");
            WriteLiteral(@"gorithm  (1 2 algorithm )

            var bound1SW = bound1.getSouthWest();
            var bound1NE = bound1.getNorthEast();

            var bound2SW = bound2.getSouthWest();
            var bound2NE = bound2.getNorthEast();

            var cornerBound1 = null;
            var cornerBound2 = null;

            var corner1SWlat = null;
            var corner1SWlng = null;
            var corner1NElat = null;
            var corner1NElng = null;

            var corner2SWlat = null;
            var corner2SWlng = null;
            var corner2NElat = null;
            var corner2NElng = null;


            // calculating default corner bound 1 2
            corner1SWlat = Min(bound1SW.lat(), bound2SW.lat());
            corner1NElat = Max(bound1SW.lat(), bound2SW.lat());

            corner2SWlat = Min(bound1NE.lat(), bound2NE.lat());
            corner2NElat = Max(bound1NE.lat(), bound2NE.lat());

            if (bound1.contains(bound2SW) || bound2.contains(bound1SW)) {
       ");
            WriteLiteral(@"         corner1SWlng = Min(bound1NE.lng(), bound2NE.lng());
                corner1NElng = Max(bound1NE.lng(), bound2NE.lng());

                corner2SWlng = Min(bound1SW.lng(), bound2SW.lng());
                corner2NElng = Max(bound1SW.lng(), bound2SW.lng());
            }
            else {
                corner1SWlng = Min(bound1SW.lng(), bound2SW.lng());
                corner1NElng = Max(bound1SW.lng(), bound2SW.lng());

                corner2SWlng = Min(bound1NE.lng(), bound2NE.lng());
                corner2NElng = Max(bound1NE.lng(), bound2NE.lng());
            }

            // special cases :
            // bound2 is between the sides of bound1 or vise versa
            if (bound1SW.lng() <= bound2SW.lng() && bound1NE.lng() >= bound2NE.lng() || bound2SW.lng() <= bound1SW.lng() && bound2NE.lng() >= bound1NE.lng()) {
                if (bound1.contains(bound2SW) || bound2.contains(bound1SW)) {
                    corner1SWlat = corner2SWlat;
                    corner1NElat ");
            WriteLiteral(@"= corner2NElat;
                }
                else {
                    corner2SWlat = corner1SWlat;
                    corner2NElat = corner1NElat;
                }
            }
            else {
                if (bound1SW.lat() <= bound2SW.lat() && bound1NE.lat() >= bound2NE.lat() || bound2SW.lat() <= bound1SW.lat() && bound2NE.lat() >= bound1NE.lat()) {
                    corner2SWlng = corner1SWlng;
                    corner2NElng = corner1NElng;
                }
            }

            cornerBound1 = new google.maps.LatLngBounds(new google.maps.LatLng(corner1SWlat, corner1SWlng), new google.maps.LatLng(corner1NElat, corner1NElng));
            cornerBound2 = new google.maps.LatLngBounds(new google.maps.LatLng(corner2SWlat, corner2SWlng), new google.maps.LatLng(corner2NElat, corner2NElng));

            // special cases :
            // if bound was finite to line
            if (corner1SWlat == corner1NElat || corner1SWlng == corner1NElng) {
                cornerBoun");
            WriteLiteral(@"d1 = null;
            }
            if (corner2SWlat == corner2NElat || corner2SWlng == corner2NElng) {
                cornerBound2 = null;
            }

            return ([cornerBound1, cornerBound2]);
        }

        function getUnitItems() {

            var isInside = false;
            requestBound = map.getBounds();

            for (x in dataBounds) {
                isInside = boundContainsBound(dataBounds[x], requestBound );
                if (!isInside) {
                    continue;
                }
                isInside = true;
                requestIsRepeated = false;
                handleRequestBound(requestBound, false);
                mergeBound(requestBound);

            }
            if (!isInside) {
                toastr.warning(""Request outside of data bounds !!!"");
            }
        }


        CloudSCADAMaps.prototype.filterResults = function () {

            dateTimeInputValue =  document.getElementById(""dateTimeInput"").value;
  ");
            WriteLiteral(@"          deleteMarkers();
            getUnitItems();
            hideFilterDiv();
        }
        CloudSCADAMaps.prototype.saveUserMapCenter = function (newCenter) {

            $.ajax({
                url: mainURL + 'User/' + userId,
                type: ""PUT"",
                accepts: ""application/json"",
                contentType: ""application/json"",
                data: JSON.stringify(newCenter),
                success: function () {
                    var message = [""Map center was set successfully"", """"].join('<br>');
                    toastr.success(message);
                },
                error: function () {
                    var message = [""Map center was set successfully"", """"].join('<br>');
                    toastr.error(message);
                }
            });
        }

        function sendUnitItemsRequest(requestBound) {

            var southWestLat = requestBound.getSouthWest().lat();
            var southWestLng = requestBound.getSouthWest().l");
            WriteLiteral(@"ng();
            var northEastLat = requestBound.getNorthEast().lat();
            var northEastLng = requestBound.getNorthEast().lng();


            var terminalDropDownList = document.getElementById(""terminalDropDownList"");
            var Id = getSelectedId(terminalDropDownList,userId);

            var componentDropDownList = document.getElementById(""componentDropDownList"");
            var componentId = getSelectedId(componentDropDownList,-1);

            var roleDropDownList = document.getElementById(""roleDropDownList"");
            var roleId = getSelectedId(roleDropDownList,-1);

            var minValue = document.getElementById(""minValueTextBox"").value;
            var maxVlaue = document.getElementById(""maxValueTextBox"").value;

            var dateTime;
            if(dateTimeInputValue == """") // public variable
                dateTime = new Date();
            else{
                dateTime = new Date(dateTimeInputValue);
            }

            dateTime = ""\/Date(""");
            WriteLiteral(@"+dateTime.valueOf()+"")\/"";

            var isSubFilter = document.getElementById(""subFilterCheckBox"").checked;

            var southWest = {
                ""Lat"": southWestLat.toString(),
                ""Lng"": southWestLng.toString()
            }

            var northEast = {
                ""Lat"": northEastLat.toString(),
                ""Lng"": northEastLng.toString()
            }

            var unitItemFilter = {
                ""Id"" : Id,
                ""ComponentId"" : componentId,
                ""RoleId"" : roleId,
                ""MinValue"" : minValue,
                ""MaxValue"" : maxVlaue,
                ""DateTime"" : dateTime,
                ""IsSubFilter"" : isSubFilter,
                ""SouthWest"" : southWest,
                ""NorthEast"" : northEast
            }

            $.ajax({
                type: ""POST"",
                accepts: ""application/json"",
                url: mainURL+'UnitItems',
                contentType: ""application/json"",
             ");
            WriteLiteral(@"   data: JSON.stringify(unitItemFilter),
                error: function (jqXHR, textStatus, errorThrown) {
                    var message = [""Something went wrong!"", errorThrown,""""].join('<br>');
                    toastr.error(message);
                },
                success: function (data) {
                    if (data == """") {
                        var message = [""There is no Items in this place!"", """"].join('<br>');
                        toastr.warning(message);
                    }
                    else{
                        showUnitItemsOnMap(data);
                    }
                }
            });

        }

        function showUnitItemsOnMap(unitItemList) {

            $.each(unitItemList, function (key, unitItem) {

                var unitItemId = unitItem.id;
                var fullness = unitItem.lastValue;
                var subList = unitItem.subLastValues;
                var subListIdes = unitItem.subItemIdes;

                var lat = ");
            WriteLiteral(@"unitItem.location.lat;
                var lng = unitItem.location.lng;

                var isOverflow = unitItem.isOverflow;

                var location = new google.maps.LatLng(lat, lng);
                addMarker(location, unitItem.id);
                updateMarkerFullnessPercentage(markers.length - 1, fullness, subList, subListIdes, isOverflow, true);
            });
        }

        function getSelectedId(dropDownList,defaultValue) {

            var selectedValue = dropDownList.value;

            if (selectedValue != """") {
                return selectedValue;
            }
            else return defaultValue;
        }
        function addMarker(location, unitItemId) {

            var locationString = location.toUrlValue(3);
            var commaIndex = locationString.indexOf("","");

            var lat = locationString.substr(0, commaIndex);
            var lng = locationString.substr(commaIndex + 1);

            if (location.lat() > maxNorthEastLat) {
            ");
            WriteLiteral(@"    maxNorthEastLat = lat;
            }
            if (location.lng() > maxNorthEastLng) {
                maxNorthEastLng = lng;
            }
            if (location.lat() < minSouthWestLat) {
                minSouthWestLat = lat;
            }
            if (location.lng() < minSouthWestLng) {
                minSouthWestLng = lng;
            }

            for (var i in markers) {
                if (isEqualByPosition(markers[i].position, location)) {

                    markers[i].setAnimation(google.maps.Animation.BOUNCE);
                    requestIsRepeated = true;
                    return;
                }
            }

            var marker = new google.maps.Marker({
                position: location,
                map: map,
                title: ""Unit Item Id: "" + unitItemId,
                animation: google.maps.Animation.DROP,
                icon: {
                    path: 'M 0,0 H {0} M 0,{2} V {1} H {0} V {3} H 0 M {0},{3} V {2}'.format(width, hei");
            WriteLiteral(@"ght, offset, 0),
                    fillColor: 'white',
                    fillOpacity: 0.5,
                    scale: markerScaleSize,
                    strokeColor: 'black',
                    anchor: new google.maps.Point(width / 2, height)
                },
            });


            markers.push(marker);
            unitItemIdes.push(unitItemId);
            google.maps.event.addListener(marker, 'click', function (e) {


                var unitSubListMarkerIndex = unitSubListMarkers.indexOf(marker);

                if (unitSubListMarkerIndex == -1) {

                    sendUnitItemDetailsRequest(unitItemId);

                    showSaveWidgetDiv();
                    window.setTimeout(function () {
                        map.panTo(marker.getPosition());
                    }, 500);

                }
                else {

                    if (tempSubMarkers.length > 0) {
                        removeTempMarkers();
                        return;
    ");
            WriteLiteral(@"                }

                    var subList = unitSubListsValues[unitSubListMarkerIndex];
                    var subListIdes = unitSubListsIdes[unitSubListMarkerIndex]
                    var subUnitOffset = offset * 2;

                    var len = subList.length;
                    var startX = -(len - 1) * 3 * subUnitOffset / 2;
                    var startY = height + subUnitOffset;

                    for (var i = 0; i < len ; i++) {

                        var fullness = subList[i] / (100 / maxHeight);
                        var color = fullnessColors[Math.floor(fullness / (maxHeight / fullnessColors.length))];
                        var completion = -(height - fullness - offset);
                        var relativeHeight = height - offset;

                        var subMarker = new google.maps.Marker({
                            position: location,
                            map: map,
                            //title: ""Unit Item Id: "" + subListIdes[i],
      ");
            WriteLiteral(@"                      title: subList[i] + ""%"",
                            icon: {
                                path: 'm {0},{1} h {2} m {6},{4} v {3} h {2} v {5} h {6} m {2},0 v {7}'.format(startX, startY, width, relativeHeight, offset, -fullness, -width, completion),
                                fillColor: color,
                                fillOpacity: 0.5,
                                scale: markerScaleSize,
                                strokeColor: 'black',
                                anchor: new google.maps.Point(width / 2, height)
                            },
                        });

                        startX += width + subUnitOffset;

                        tempSubMarkers.push(subMarker);

                        google.maps.event.addListener(subMarker, 'click', function (e) {

                            var subListIdes = unitSubListsIdes[unitSubListMarkerIndex];
                            sendUnitItemDetailsRequest(subListIdes[tempSubMarkers.indexOf");
            WriteLiteral(@"(this)]);

                            showSaveWidgetDiv();
                            window.setTimeout(function () {
                                map.panTo(marker.getPosition());
                            }, 500);
                        });
                    }
                }

            });
        }
        function showUnitItemDetails(unitItemDetails) {

            // reset the text
            widgetDiv.getElementsByTagName(""p"")[0].textContent = """";

            $.each(unitItemDetails, function (key, unitItemDetail) {

                var name = unitItemDetail.name;
                var role = unitItemDetail.roleName;
                var modelNo = unitItemDetail.modelNo;
                var lastValue = unitItemDetail.lastValue;
                var isOverflow = unitItemDetail.isOverflow;
                var date = new Date(parseInt(unitItemDetail.date.substr(6))).toLocaleString();

                var lastValueString = lastValue.toString();
                lastValue");
            WriteLiteral(@"String = lastValueString.substr(0, lastValueString.indexOf(""."") + 4);

                if (isOverflow) {
                    lastValueString = ""<span style='color:red;'>"" + lastValueString + "" </span> <span class='glyphicon glyphicon-warning-sign' style='color:red; padding-left:2px;'> </span>"";
                }

                widgetDiv.getElementsByTagName(""p"")[0].innerHTML += ""<hr/><strong>Name : </strong>{0}<br><strong>Model : </strong>{1}<br> <strong>Role : </strong> {2} <br> <strong>Value : </strong>{3}<br><strong>Date : </strong>{4}<br>""
                                                                    .format(name, modelNo,role, lastValueString, date);
            });



            var mapDiv = document.getElementById(""map-canvas"");
            var mapdivHeight = mapDiv.offsetHeight;

            var widgetDivHeight = 131 * unitItemDetails.length + 59;

            if(widgetDivHeight > mapdivHeight){
                widgetDiv.style.height = ""95%"";
            }
            else");
            WriteLiteral(@"{
                widgetDiv.style.height = ""auto"";
            }

        }
        function sendUnitItemDetailsRequest(unitItemId) {

             $.ajax({
                type: ""GET"",
                url: mainURL+'UnitItems/'+ unitItemId,
                error: function (jqXHR, textStatus, errorThrown) {
                   var message = [""Something went wrong!"", errorThrown,""""].join('<br>');
                    toastr.error(message);
                },
                success: function (data) {
                    showUnitItemDetails(data);
                    var message = [""Successfully"", """"].join('<br>');
                    toastr.success(message);
                }
            });
        }
        function isEqualByPosition(position1, position2) {
            if (position1.lat() != position2.lat())
                return false;
            if (position1.lng() != position2.lng())
                return false;
            return true;
        }
        function setAllMap(map)");
            WriteLiteral(@" {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
            for (var i = 0; i < smallMarkers.length; i++) {
                smallMarkers[i].setMap(map);
            }
            for (var i = 0; i < tempSubMarkers.length; i++) {
                tempSubMarkers[i].setMap(map);
            }
        }
        function hideMarkers() {
            setAllMap(null);
        }
        function showMarkers() {
            setAllMap(map);
        }
        function deleteMarkers() {
            hideMarkers();

            minSouthWestLat = 90;
            minSouthWestLng = 180;
            maxNorthEastLat = -90;
            maxNorthEastLng = -180;

            requestedBounds = [];

            unitSubListsValues = [];
            unitSubListsIdes = [];
            unitSubListMarkers = [];
            unitItemIdes = [];

            markers = [];
            smallMarkers = [];
            smallMarkersUnitIdes = [];
      ");
            WriteLiteral(@"      tempSubMarkers = [];
        }
        function stopMarkerAnimation() {
            for (var i = 0; i < markers.length; i++) {
                if (markers[i].getAnimation() != null) {
                    markers[i].setAnimation(null);
                }
            }
        }
        function changeMarkerScale() {

            for (var i = 0; i < markers.length; i++) {
                var icon = markers[i].get('icon');
                icon.scale = markerScaleSize;
                markers[i].setMap(map);
            }
            for (var i = 0; i < smallMarkers.length; i++) {
                var icon = smallMarkers[i].get('icon');
                icon.scale = markerScaleSize;
                smallMarkers[i].setMap(map);
            }
        }
        function updateMarkerFullnessPercentage(index, fullnessPercentage, subList, subListIdes,isOverflow, isFirstTime) {
            var icon = markers[index].get('icon');
            markers[index].title = fullnessPercentage + ""%"";

  ");
            WriteLiteral(@"          var fullness = fullnessPercentage / (100 / maxHeight);
            var fullnessLoc = height - fullness;

            icon.fillColor = fullnessColors[Math.floor(fullness / (maxHeight / fullnessColors.length))];
            icon.path = 'M 0,0 H {0} M 0,{2} V {1} H {0} V {3} H 0 M {0},{3} V {2}'.format(width, height, offset, fullnessLoc);


            markers[index].setMap(map);


            if (isOverflow) {
                var infowindow = new google.maps.InfoWindow({
                    content: "" <span class='glyphicon glyphicon-warning-sign' style='color:red; padding-left:2px;' ></span> <b> Overflow ... !!!</b>""
                });

                infoWindows.push(infowindow);

                infowindow.open(map, markers[index]);
            }

            if (subList == null) {
                return;
            }

            if (isFirstTime) {
                unitSubListsValues.push(subList);
                unitSubListsIdes.push(subListIdes);
                uni");
            WriteLiteral(@"tSubListMarkers.push(markers[index]);

                var squareOffset = offset / 2;
                var squareLength = (height - offset) / 5;

                var startX = width + squareOffset;
                var startY = height;

                for (var i = 0; i < subList.length; i++) {

                    var fullness = subList[i] / (100 / maxHeight);
                    var color = fullnessColors[Math.floor(fullness / (maxHeight / fullnessColors.length))];

                    var marker = new google.maps.Marker({
                        position: markers[index].getPosition(),
                        map: map,
                        icon: {
                            path: 'M {0},{1} h {2} v {3} h {3} v {2}'.format(startX, startY, squareLength, -squareLength),
                            fillColor: color,
                            fillOpacity: 0.5,
                            scale: markerScaleSize,
                            strokeColor: 'black',
                           ");
            WriteLiteral(@" anchor: new google.maps.Point(width / 2, height)
                        },
                    });

                    smallMarkers.push(marker);
                    smallMarkersUnitIdes.push(subListIdes[i]);
                    startY -= squareLength + squareOffset;
                }
            }
            else {

                var unitSubValueListsIndex = -1;

                $.each(unitSubListsIdes, function (ind, arr) {
                    if (arraysEqual(arr, subListIdes))
                        unitSubValueListsIndex = ind;
                });

                if (unitSubValueListsIndex == -1) {
                    return;
                }


                unitSubListsValues[unitSubValueListsIndex] = subList;
                removeTempMarkers();
                $('#save-widget').hide(1000);


                for (var i = 0; i < subListIdes.length; i++) {

                    var fullness = subList[i] / (100 / maxHeight);
                    var color = fullnessC");
            WriteLiteral(@"olors[Math.floor(fullness / (maxHeight / fullnessColors.length))];
                    var smallMarkerIndex = smallMarkersUnitIdes.indexOf(subListIdes[i]);
                    var smallMarkerIcon = smallMarkers[smallMarkerIndex].get('icon');
                    smallMarkerIcon.fillColor = color;

                    smallMarkers[smallMarkerIndex].setMap(map);
                }
            }

        }
        function arraysEqual(a, b) {
            if (a === b) return true;
            if (a == null || b == null) return false;
            if (a.length != b.length) return false;


            for (var i = 0; i < a.length; ++i) {
                if (a[i] !== b[i]) return false;
            }
            return true;
        }
        function updateFullnessPrecentages() {

            removeInfowindows();

            var fullnessPrecentagesList = $.parseJSON(xhrUnitItems.responseText);

            $.each(fullnessPrecentagesList, function (key, fullnessPrecentage) {

             ");
            WriteLiteral(@"   var unitItemId = fullnessPrecentage.Id;
                var fullness = fullnessPrecentage.LastValue;
                var subList = fullnessPrecentage.SubLastValues;
                var subListIdes = fullnessPrecentage.SubItemIdes;
                var isOverflow = fullnessPrecentage.IsOverflow;

                var markerIndex = unitItemIdes.indexOf(unitItemId);
                if (markerIndex != -1) {
                    updateMarkerFullnessPercentage(markerIndex, fullness, subList, subListIdes, isOverflow, false);
                }
            });
        }

        //function sendFullnessPercentagesRequest() {

        //    var reqSW = new google.maps.LatLng(minSouthWestLat,minSouthWestLng, true);
        //    var reqNE = new google.maps.LatLng(maxNorthEastLat,maxNorthEastLng, true);
        //    var requestBound = new google.maps.LatLngBounds(reqSW, reqNE);
        //    sendUnitItemsRequest(requestBound);
        //}

        //function setFullnesspercentagesInterval() {

    ");
            WriteLiteral(@"    //    window.setInterval(function () {
        //        dateTimeInputValue =  """";
        //        sendFullnessPercentagesRequest();
        //    }, 60000); // 1 minutes
        //}

        function removeTempMarkers() {
            for (var i = 0; i < tempSubMarkers.length; i++) {
                tempSubMarkers[i].setMap(null);
            }
            tempSubMarkers = [];
        }
        function removeInfowindows() {

            for (var i = 0; i < infoWindows.length; i++) {
                infoWindows[i].setMap(null);
            }
            infoWindows = [];

        }
        function zoomChangedFunc() {

            removeTempMarkers();

            if (map.getZoom() > zoomLastLevel) {
                for (var i = 0; i < map.getZoom() - zoomLastLevel; i++) {
                    markerScaleSize *= markerScaleRatio;
                }
            }
            else {
                for (var i = 0; i < zoomLastLevel - map.getZoom() ; i++) {
                    ");
            WriteLiteral(@"markerScaleSize /= markerScaleRatio;
                }
            }
            changeMarkerScale();

            zoomLastLevel = map.getZoom();
        }
        function idleFunc() {

            if (map.getZoom() < zoomMinLimit) {
                toastr.error(""Very high zoom level !!!"");
                hideMarkers();
                markersAreHidden = true;
                return;
            }

            if (markersAreHidden) {
                showMarkers();
                markersAreHidden = false;
            }

            getUnitItems();
        }
        function createMapCustomControls() {
            var centerControlDiv = document.createElement('div');
            var centerControl = new CenterControl(centerControlDiv, map);

            centerControlDiv.index = 0;
            map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(centerControlDiv);

            var filterControlDiv = document.createElement('div');
            filterControl = new FilterContr");
            WriteLiteral(@"ol(filterControlDiv, map);

            map.controls[google.maps.ControlPosition.LEFT_CENTER].push(filterControlDiv);

        }
        google.maps.event.addListener(map, 'idle', idleFunc);
        google.maps.event.addListener(map, 'zoom_changed', zoomChangedFunc);
        createMapCustomControls();
        //setFullnesspercentagesInterval();


        hideSaveWidgetDiv();
    }

    function initializeFunc() {

        cloudSCADAMaps = new CloudSCADAMaps();
    }

    CenterControl.prototype.center_ = null;
    CenterControl.prototype.getCenter = function () {
        return this.center_;
    }
    CenterControl.prototype.setCenter = function (center) {
        this.center_ = center;
    }
    function CenterControl(controlDiv, map) {


        var control = this;

        control.center_ = map.center;
        controlDiv.style.clear = 'both';
        controlDiv.setAttribute(""Style"", ""width:35px;"");

        var goCenterUI = document.createElement('div');
        goCenter");
            WriteLiteral(@"UI.setAttribute(""class"", ""map-control"");
        goCenterUI.innerHTML = ""<span class='glyphicon glyphicon-move'></span>"";
        goCenterUI.title = 'Click to go to map center';
        controlDiv.appendChild(goCenterUI);

        var setCenterUI = document.createElement('div');
        setCenterUI.setAttribute(""class"", ""map-control"");
        setCenterUI.innerHTML = ""<span class='glyphicon glyphicon-map-marker'></span>"";
        setCenterUI.title = 'Click to recenter the map';
        controlDiv.appendChild(setCenterUI);


        google.maps.event.addDomListener(goCenterUI, 'click', function () {
            var currentCenter = control.getCenter();
            map.setCenter(currentCenter);
        });

        google.maps.event.addDomListener(setCenterUI, 'click', function () {

            var newCenter = map.getCenter();
            cloudSCADAMaps.saveUserMapCenter(newCenter);
            control.setCenter(newCenter);
        });
    }
    function hideSaveWidgetDiv() {

        ");
            WriteLiteral(@"$(""#save-widget"").hide(1000);
    }
    function showSaveWidgetDiv() {

        if (filterControl.getIsShown()) {
            hideFilterDiv();
        }
        $(""#save-widget"").show(1000);
    }
    function hideFilterDiv() {
        filterControl.setIsShown(false);
        showFilterUI.innerHTML = ""<span class='glyphicon glyphicon-chevron-right'></span>"";
        $(""#filter-panel"").hide(1000);
    }
    function showFilterDiv() {

        $(""#save-widget"").hide(1000);

        filterControl.setIsShown(true);
        showFilterUI.innerHTML = ""<span class='glyphicon glyphicon-chevron-left'></span>"";

        var mapDiv = document.getElementById(""map-canvas"");
        var mapDivHeight = mapDiv.offsetHeight;

        var filterDiv = document.getElementById(""filter-panel"");
        var filterDivHeight = 320;

        if(filterDivHeight > mapDivHeight){
            filterDiv.style.height = ""95%"";
        }
        else{
            filterDiv.style.height = ""auto"";
        }

   ");
            WriteLiteral(@"     $(""#filter-panel"").show(1000);
    }
    FilterControl.prototype.isShown_ = null;
    FilterControl.prototype.getIsShown = function () {
        return this.isShown_;
    }
    FilterControl.prototype.setIsShown = function (isShown) {
        this.isShown_ = isShown;
    }
    function FilterControl(controlDiv, map) {

        var control = this;

        control.isShown_ = true;

        controlDiv.style.clear = 'both';
        controlDiv.setAttribute(""Style"", ""height:100%"");
        //controlDiv.setAttribute(""Style"", ""width:auto"");

        var filterUI = document.createElement('div');
        filterUI.setAttribute(""id"", ""filter-panel"");
        filterUI.setAttribute(""class"", ""side-panel"");
        var node = document.getElementById(""filter-options"");
        filterUI.innerHTML = node.innerHTML;
        controlDiv.appendChild(filterUI);

        showFilterUI = document.createElement('div');
        showFilterUI.setAttribute(""class"", ""map-control"");
        showFilterUI.setAt");
            WriteLiteral(@"tribute(""style"", ""float:right; margin-top:50%"");
        showFilterUI.innerHTML = ""<span class='glyphicon glyphicon-chevron-left'></span>"";
        showFilterUI.title = 'Click to show/hide filter';
        controlDiv.appendChild(showFilterUI);


        google.maps.event.addDomListener(showFilterUI, 'click', function () {
            if (control.getIsShown()) {
                hideFilterDiv();
            }
            else {
                showFilterDiv();

                var componentDropDownList = document.getElementById(""componentDropDownList"");
                selectComponenet(componentDropDownList);

                var roleDropDownList = document.getElementById(""roleDropDownList"");
                selectRole(roleDropDownList);

                var dateTimeInput = document.getElementById(""dateTimeInput"");
                dateTimeInput.max = new Date().today() + ""T"" + new Date().timeNow();
            }
        });

    }
    function fillDropDownList(dropDownList,dataSource){");
            WriteLiteral(@"

        for (var i = 0; i < dataSource.length; i++) {

            if($.grep(dropDownList.options, function(e){ return e.value == dataSource[i].Id; }).length > 0)
                continue;

            dropDownList.options[dropDownList.length] = new Option(dataSource[i].Name, dataSource[i].Id);
        }
    }
    function fillAllDropDownList(filterComponents,dropDownList){

        for (var index = 0; index < filterComponents.length; index++) {
            var dataSource = filterComponents[index].SubFilterComponents;
            fillDropDownList(dropDownList,dataSource);
        }
    }
    function selectComponenet(terminalDropDownList) {
        var componentDropDownList = document.getElementById(""componentDropDownList"");
        componentDropDownList.options.length = 0;
        componentDropDownList.options[0] = new Option(""All"", ""-1"", true, false);
        var roleDropDownList = document.getElementById(""roleDropDownList"");
        roleDropDownList.options.length = 0;
        roleD");
            WriteLiteral("ropDownList.options[0] = new Option(\"All\", \"-1\", true, false);\r\n        var filterComponents = ");
            EndContext();
            BeginContext(53181, 48, false);
#line 1421 "C:\Users\ABUBA\Downloads\adsmap\Views\Map\Index.cshtml"
                          Write(Html.Raw(Json.Serialize(Model.FilterComponents)));

#line default
#line hidden
            EndContext();
            BeginContext(53229, 783, true);
            WriteLiteral(@";
        var terminalIndex = terminalDropDownList.selectedIndex;
        if (terminalIndex == 0) {
            fillAllDropDownList(filterComponents,componentDropDownList);
        }
        else{
            var dataSource = filterComponents[terminalIndex - 1].SubFilterComponents;
            fillDropDownList(componentDropDownList,dataSource);
        }
        selectRole(componentDropDownList);
    }
    function selectRole(componentDropDownList) {
        var terminalDropDownList = document.getElementById(""terminalDropDownList"");
        var roleDropDownList = document.getElementById(""roleDropDownList"");
        roleDropDownList.options.length = 0;
        roleDropDownList.options[0] = new Option(""All"", ""-1"", true, false);
        var filterComponents = ");
            EndContext();
            BeginContext(54013, 48, false);
#line 1437 "C:\Users\ABUBA\Downloads\adsmap\Views\Map\Index.cshtml"
                          Write(Html.Raw(Json.Serialize(Model.FilterComponents)));

#line default
#line hidden
            EndContext();
            BeginContext(54061, 1508, true);
            WriteLiteral(@";
        var terminalIndex = terminalDropDownList.selectedIndex;
        var componentIndex = componentDropDownList.selectedIndex;
        if (componentIndex == 0) {
            if (terminalIndex == 0) {
                for (terminalIndex = 0; terminalIndex < filterComponents.length; terminalIndex++) {
                    fillAllDropDownList(filterComponents[terminalIndex].SubFilterComponents,roleDropDownList);
                }
            }
            else{
                fillAllDropDownList(filterComponents[terminalIndex - 1].SubFilterComponents,roleDropDownList);
            }
        }
        else{
            if (terminalIndex == 0) {
                for (terminalIndex = 0; terminalIndex < filterComponents.length; terminalIndex++) {
                    if(filterComponents[terminalIndex].SubFilterComponents.length > componentIndex - 1 && filterComponents[terminalIndex].SubFilterComponents[componentIndex - 1].Id == componentDropDownList.value){
                        var dataSource =");
            WriteLiteral(@" filterComponents[terminalIndex].SubFilterComponents[componentIndex - 1].SubFilterComponents;
                        fillDropDownList(roleDropDownList,dataSource);
                    }
                }
            }
            else{
                var dataSource = filterComponents[terminalIndex - 1].SubFilterComponents[componentIndex - 1].SubFilterComponents;
                fillDropDownList(roleDropDownList,dataSource);
            }
        }
    }
</script>

");
            EndContext();
            BeginContext(55633, 736, true);
            WriteLiteral(@"<input type=""text"" id=""autocomplete"">
<div id=""map-canvas""></div>

<div id=""save-widget"" class=""side-panel"">

    <button id=""close-button"" type=""button"" onclick=""hideSaveWidgetDiv()"">
        <span class=""glyphicon glyphicon-remove-circle"" style=""font-size: 30px; ""> </span>
    </button>

    <h4 style=""margin-left:30% ; color:GrayText;"">Unit Details</h4>
    <p>
        Ebubekir Müh. Danış.
    </p>
</div>

<div id=""filter-options"" style=""display:none"">
    <p>
        <h4 style=""color:GrayText; position: relative; left: 20%;"">Filter Options</h4>
        <hr />
        <table>

            <tr id=""terminalRow"">
                <td><label class=""filter-label"">Terminal :</label></td>
                <td>");
            EndContext();
            BeginContext(56370, 172, false);
#line 1491 "C:\Users\ABUBA\Downloads\adsmap\Views\Map\Index.cshtml"
               Write(Html.DropDownList("terminalDropDownList", new SelectList(@Model.FilterComponents, "Id", "Name"), "All", new { Class = "filterInput", onchange = "selectComponenet(this);" }));

#line default
#line hidden
            EndContext();
            BeginContext(56542, 158, true);
            WriteLiteral("</td>\r\n            </tr>\r\n\r\n            <tr id=\"ComponentRow\">\r\n                <td><label class=\"filter-label\">Component :</label></td>\r\n                <td>");
            EndContext();
            BeginContext(56701, 162, false);
#line 1496 "C:\Users\ABUBA\Downloads\adsmap\Views\Map\Index.cshtml"
               Write(Html.DropDownList("componentDropDownList", new SelectList(new List<string>(), "Id", "Name"), "All", new { Class = "filterInput", onchange = "selectRole(this);" }));

#line default
#line hidden
            EndContext();
            BeginContext(56863, 162, true);
            WriteLiteral("</td>\r\n            </tr>\r\n\r\n            <tr id=\"ComponentRoleRow\">\r\n                <td><label class=\"filter-label\">Role Type :</label></td>\r\n                <td>");
            EndContext();
            BeginContext(57026, 125, false);
#line 1501 "C:\Users\ABUBA\Downloads\adsmap\Views\Map\Index.cshtml"
               Write(Html.DropDownList("roleDropDownList", new SelectList(new List<string>(), "Id", "Name"), "All", new { Class = "filterInput" }));

#line default
#line hidden
            EndContext();
            BeginContext(57151, 1247, true);
            WriteLiteral(@"</td>
            </tr>

            <tr id=""MinLastValueRow"">
                <td><label class=""filter-label"">Min Value :</label></td>
                <td><input id=""minValueTextBox"" type=""text"" value=""0"" class=""filterInput"" /></td>
            </tr>

            <tr id=""MaxLastValueRow"">
                <td><label class=""filter-label"">Max Value :</label></td>
                <td><input id=""maxValueTextBox"" type=""text"" value=""100"" class=""filterInput"" /></td>
            </tr>

            <tr id=""DateLastValueRow"">
                <td><label class=""filter-label"">From Date :</label></td>
                <td>
                    <input id=""dateTimeInput"" type=""datetime-local"" min=""2015-01-01T00:00"" class=""filterInput"" />
                </td>
            </tr>

            <tr id=""includeSubValueRow"">
                <td><label class=""filter-label"">Sub Filter:</label></td>
                <td><input id=""subFilterCheckBox"" type=""checkbox"" checked> <b> include sub units</b> </td>
         ");
            WriteLiteral("   </tr>\r\n\r\n        </table>\r\n\r\n        <hr />\r\n        <input style=\"position: relative; left: 20%;\" type=\"submit\" value=\"Costumized Search\" onclick=\"cloudSCADAMaps.filterResults()\" class=\"filterInput\" />\r\n    </p>\r\n</div>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<adsmap.Models.User> Html { get; private set; }
    }
}
#pragma warning restore 1591
